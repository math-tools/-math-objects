this::
    date = 2022-07-05


==================
\Trads "calculées"
==================

L'efficacité du nommage des nombres naturels vient de règles "calculatoires". Par exemple, en français académique, les nombres de `81` à `89` se nomment en accolant le nom du chiffre des unités à la suite de "quatre-vingt-" pour obtenir "quatre-vingt-**un**", "quatre-vingt-**deux**", "quatre-vingt-**trois**", ... \etc.
Notons au passage que "quatre-vingt" utilise les noms de `4` et `20`.
Ces deux règles sont rapidement définies comme suit.

cvnum::
    ---
    file    = FR/FR/integers.txt
    extract = yes
    ---

    small::
    // ... etc.

        80 = [4]-[20]s
        8* = [4]-[20]-[d(0)]

    // ... etc.


Comment cela fonctionne-t-il ? Il se trouve que l'on peut utiliser un petit langage spécialisé pour rendre les traductions faciles à définir.

    1) Dans cvnum::``80 = [4]-[20]s``, nous demandons que `80` soit traduit en utilisant cvnum::``[4]`` et cvnum::``[20]`` les noms de `4`et `20` \resp (ces noms sont définis avant dans le code reproduit partiellement ci-dessus).

    1) La règle cvnum::``8* = [4]-[20]-[d(0)]`` utilise les mécanismes suivants.

        * cvnum::``8*`` demande d'appliquer une règle aux naturels de deux chiffres commençant par un `8`.

        * La règle cvnum::``80 = ...`` étant avant cvnum::``8* = ...`` , lorsque le naturel `80` sera rencontré, on utilisera la \1ere règle sans chercher à en appliquer d'autre : c'est le principe du "premier arrivé, premier servi".
        Donc ici, la règle cvnum::``8*`` ne s'appliquera qu'aux naturels allant de `81` à `89`.

        * Dans cvnum::``8* = [4]-[20]-[d(0)]``, l'emploi de cvnum::``[d(0)]`` demande de remplacer cvnum::``[d(0)]`` par le nom du chiffre des unités.
        Par exemple, pour `86`, le code cvnum::``[d(0)]`` fait référence à "six" le nom de `6`.
        En fait, cvnum::``d`` est le petit \nbre à nommer, tandis que cvnum::``d(0)`` fait référence au chiffre des unités correspondant à `1 = 10^0`.
        De même, cvnum::``d(1)`` est le chiffre des dizaines puisque `10 = 10^1`.


Il devient maintenant facile de comprendre les lignes suivantes où notamment cvnum::``[d(1)0]`` permet de nommer en mettant à zéro le chiffre des unités.

cvnum::
    ---
    file    = FR/FR/integers.txt
    extract = yes
    ---

    small::
    // ... etc.

        80 = [4]-[20]s
        8* = [4]-[20]-[d(0)]

        71 = [60]-et-[11]
        7* = [60]-[1d(0)]
        9* = [4]-[20]-[1d(0)]

        *1 = [d(1)0]-et-[1]
        ** = [d(1)0]-[d(0)]

    // ... etc.


Une ancienne version du fichier path::``FR/FR/integers.txt`` utilisait les règes suivantes au lieu des précédentes (ceci était moins explicite bien que fonctionnel).

cvnum::
    ---
    title   = Une ancienne version
    file    = FR/FR/integers.txt
    extract = yes
    ---

    small::
    // ... etc.

        [2..6]1     = [d(1)0]-et-[1]
        [1..6 | 8]* = [d(1)0]-[d(0)]

        71 = [60]-et-[11]
        7* = [60]-[1d(0)]
        9* = [4]-[20]-[1d(0)]

    // ... etc.


Ce qui précède contient les commandes suivantes qui pourront peut-être s'avérer pratiques dans certaines situations
((
    Si à l'usage il est inutile de se servir d'alternatives de recherche, cette fonctionnalité disparaîtra dans le cimétière des FBI (Fausses Bonnes Idées).
)).

    1) La règle cvnum::``[2..6]1 = [d(1)0]-et-[1]`` s'applique aux naturels `21`, `31`, `41`, `51` et `61` en prenant \resp les noms de `20`, `30`, `40`, `50` et `60` suivis de "-et-" puis du nom de `1`.
    En fait, cvnum::``2..6`` indique un naturel allant de `2` à `6`.

    1) cvnum::``1..6 | 8`` indique `8` ou un naturel allant de `1` à `6`. En fait, cvnum::``1..6`` est un raccourci pour cvnum::``1 | 2 | 3 | 4 | 5 | 6``.

    1) Rappelons que `21` était traité par cvnum::``[2..6]1 = ...`` , et non par cvnum::``[1..6 | 8]* = ...`` car cette règle est définie après dans le fichier.


Finissons avec quelque chose très pratique.
Le code ci-dessous utilise une alternative simple afin d'obtenir "deux cents", "trois cent quatre", ou "sept cent mille", mais pas "un cent deux" ou "sept cents mille" (noter le "s" non souhaité).

cvnum::
    ---
    file    = FR/FR/integers.txt
    extract = yes
    ---

    small::
    // ... etc.

        100 = cent
        *00 = [d(2)] [100]s
        *** = [d(2) :if: d(2) > 1]
              [100]
              [d(1)d(0)]

    // ... etc.


La chose intéressante dans ce code est cvnum::``[d(2) :if: d(2) > 1]`` demandant de n'ajouter le nom du nombre de centaines que si ce dernier dépasse `1`.
Voici deux autres utilisations d'alternatives où l'usage de cvnum::``"..."`` au lieu de cvnum::``[...]`` permet d'indiquer directement du texte à utiliser.

    1) Dans path::``EN/GN/integers.txt``, on trouve cvnum::``thousand "and :if: 0 < r < 100"`` afin de n'ajouter "and" après "thousand" que s'il reste après les milliers va de 1 à 99 (nous verrons plus tard l'usage de la variable spéciale cvnum::``r`` pour les milliers, les millions...).

    1) Dans path::``ES/ES/integers.txt``, on trouve cvnum::``mill"ones :if: d > 1 :else: ón"`` avec un cvnum::``:else:``.
    Cette régele sert à accorder correctement "millón" en "millones" au pluriel.


warning::
    Pour le moment, écrire une règle sur plusieurs lignes ne peut se faire uniquement si le symbole ``=`` n'apparait pas dans les lignes suivantes.
