this::
    date = 2022-08-07


=========================================
De la base décimale à une base quelconque
=========================================

Commençons par du classique où vous noterez que les lettres sont en majuscule
((
    C'est un choix facilitant la lecture. \Python travaille lui avec des minuscules.
)),
et aussi que les listes de chiffres vont du poids le plus élevé à celui le plus faible
((
    Ceci est en accord avec l'écriture alphanumérique.
)).
Notez l'appel au module ``nat2base`` du package ``cvnum.convert.natural``.

python-term::
    >>> from cvnum.convert.natural.nat2base import Nat2Base
    >>> myn2b = Nat2Base()
    >>> n = 4 + 15*16 + 10*16**2 + 3*16**4
    >>> b = 16
    >>> print(myn2b.nat2bdigits(n, b))
    [3, 0, 10, 15, 4]
    >>> print(myn2b.nat2bnumerals(n, b))
    ['3', '0', 'A', 'F', '4']
    >>> print(myn2b.nat2bnb(n, b))
    '30AF4'


Suivant les besoins, on peut donc au choix obtenir une liste d'entiers relativement à la base choisie via la méthode ``nat2bdigits``
((
    Dans ``nat2bdigits``, ``nat`` fait \ref à "natural", et ``bdigits`` à "base digits".
    Donc ``nat2bdigits`` se lit "natural to base digits", soit "naturel vers décimaux de la base" en anglais.
)),
soit une liste de chiffres
((
    On peut traduire "chiffre", au sens de symbole écrit, par "numeral" en anglais.
))
via la méthode ``nat2bnumerals``, soit une écriture alphanumérique via la méthode ``nat2bnb``.


Comme le montre l'exemple suivant, il est possible de travailler avec des bases plus grandes, et moins classiques (ce qui est à la fois intéressant et utile). Nous expliquons juste après les règles retenues pour ces situations un peu particulières.
Noter dans le dernier cas la possibilité d'indiquer un texte séparant les chiffres pour simplifier la lecture de l'écriture alphanumérique.

...python-term::
    >>> n = 1 + 39*40 + 10*40**5
    >>> b = 40
    >>> print(myn2b.nat2bdigits(n, b))
    [10, 0, 0, 0, 39, 1]
    >>> print(myn2b.nat2bnumerals(n, b))
    ['0A', '00', '00', '00', '13', '01']
    >>> print(myn2b.nat2bnb(n, b))
    '0A0000001301'
    >>> print(myn2b.nat2bnb(n, b, sep = '.'))
    '0A.00.00.00.13.01'


Comment est obtenue la liste de chiffres relativement à une base `b > 1` non classique ?

    1) Si **`b < 36`**, on a le fonctionnement suivant.

        a) Si `0 <= n < 10`, l'écriture alphanumérique de `n` est `n` tout simplement.

        b) Si `10 <= n < b`, l'écriture alphanumérique de `n` est la lettre majuscule à la position `(n - 9)` dans l'alphabet
        ((
            Le choix retenu est de proposer une écriture décryptable par un humain. C'est pour cela que ne sont pas utilisés les minuscules et les caractères spéciaux non blancs du code \ascii.
        )).
        Pour `n = 10`, ce sera "A", pour `n = 11`, ce sera "B"... \etc.

    1) Si **`36 <= b < 36**2`**, notant `n = 36*q + r` la division euclidienne de `n` par `36`, \ie notant `[q, r]_36`  l'écriture `36`-adique de `n`, alors l'écriture alphanumérique de `n` sera la concaténation des écritures alphanumériques de `q` et `r` relativement à la base `36`, en complétant si besoin par un zéro à gauche. Par exemple, `11` et `49 = 13 + 1*36` seront transformés en ``"0B"`` et  ``"1D"`` \resp.

    1) Pour **`b >= 36**2`**, on procède comme dans le point précédent excepté que l'écriture `36`-adique de `n` aura plus de deux chiffres avec si besoin des zéros ajoutés automatiquement à gauche.


warning::
    Dans l'écriture '[00A000000000000000013001]_3000', les zéros à gauche ne sont pas superflus puisqu'en fait nous avons '[00A 000 000 000 000 000 013 001]_3000' où '[00A]_3000' désigne un chiffre, \ie un symbole, non nul dans la base `3000`.


Il est aussi possible de travailler directement avec les chiffres, ou les décimales d'un naturel. Voici quelques exemples où `13 = 8 + 2 + 1 = [1011]_2`.

...python-term::
    >>> n = 13
    >>> print(myn2b.digitsof(n))
    [1, 3]
    >>> print(myn2b.numeralsof(n))
    ['1', '3']
    >>> b = 2
    >>> print(myn2b.digits2bnb([1, 3], b))
    '1011'
    >>> print(myn2b.numerals2bnb(['1', '3'], b))
    '1011'


Pour finir, voici toutes les méthodes de conversion proposées par la classe ``Nat2Base``.

// -- ALL METHODS "AUTO" - START -- //

    1) ``digits2bdigits``
    1) ``digits2bnb``
    1) ``digits2bnumerals``
    1) ``digitsof``
    1) ``fromdigits``
    1) ``fromnumerals``
    1) ``int2bdigits``
    1) ``int2bnb``
    1) ``int2bnumerals``
    1) ``numerals2bdigits``
    1) ``numerals2bnb``
    1) ``numerals2bnumerals``
    1) ``numeralsof``

// -- ALL METHODS "AUTO" - END -- //
