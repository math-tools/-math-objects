// ---------- //

==
07
==

-----
:new:
-----

[[:doc:]]
One ¨doc has been written to explain how to use of the sub package ``core``.


--------
:update:
--------

[[:doc:]]
Here are the changes made.

    1) Detailed explanations about the ¨api of the new sub package ``convert``.

    1) Return of the explanations about the possibility to use any legal "integer-string" variable with ``textify.integer.IntName``.


--------
:fordev:
--------

[[:tests:]]
New unit tests: ``convert.integer`` is tested but the coverage score is not good (management of the signs, and symetry with the public ¨api of ``convert.natural``).


// ---------- //

==
06
==

-----
:new:
-----

[[:api:]]
The new implementation of the package ``convert.integer`` has been done following a ¨poo style (it uses the module ``convert.natural``, and the maintenance is easy thanks to the use of one "killing" decorator).


--------
:fordev:
--------

[[:doc:]]
All prototypes are now up to date.


[[:api:]]
One builder produces most of the codes of the classes ``Int2Base``, ``Base2Int`` and ``integer.Base2Base``.


// ---------- //

==
04
==

--------
:fordev:
--------

[[:tests:]]
New unit tests: ``convert.natural`` is "fully" tested ("full" is a promise, not a real gift).


[[:facto:]]
Better organisation of tests to facilitate maintenance.


// ---------- //

==
03
==

-------
:break:
-------

[[:api:]]
Here are the breaking changes.

    1) The parameter ``nb`` of the method ``textify.integer.IntName.nameof`` has been renamed ``varnb`` to stress the possibility to use legal "integer-string" variables.

    1) Please, do not laugh too loud... The module ``convert.integer.var2int`` with the class ``Var2Int`` has been moved to ``convert.core.var2int``. The aim of the module ``convert.core`` is to propose shared features for conversions.


--------
:fordev:
--------

[[:tests:]]
Some new unit tests (with a better covering of all the ¨api).

    1) The new class ``convert.core.var2int.Var2int`` is tested.

    1) Naming integers: new tests added about variables that are convertible to legal "integer-strings".

    1) Some tests for ``convert.natural`` (``Base2Nat`` is not completely tested, and no test has been done for ``Base2Base``).


// ---------- //

==
02
==

-----
:new:
-----

[[:api:]]
A new class ``convert.natural.Base2Base`` has been added to convert from any base writtings to any other base writtings.


[[:api:]]
One builder builds all the methods of the class ``convert.natural.Base2Base``.


// ---------- //

==
01
==

--------
:fordev:
--------

[[:tests:]]
Unit tests: the checker of the symetry of the ¨apis of the classes ``Base2Nat`` and ``Nat2Base`` has been transformed into a more strict test.
